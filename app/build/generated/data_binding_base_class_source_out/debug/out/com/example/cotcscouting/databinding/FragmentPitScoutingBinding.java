// Generated by view binder compiler. Do not edit!
package com.example.cotcscouting.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.cotcscouting.R;
import java.lang.Override;

public final class FragmentPitScoutingBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox againstPodium;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox againstSubwoofer;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox amp;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox ampAndSpeaker;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView autoCount;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final EditText autoCountNumber;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView autoQuestions;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView basicQuestions;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final SwitchCompat canClimb;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final SwitchCompat canGetHarmony;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final SwitchCompat canScoreTrap;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox center;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView climbTime;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final EditText climbTimeAnswer;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView coach;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final EditText coachAnswer;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final SwitchCompat doesIntake;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox doesMatter;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final SwitchCompat doesPreload;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final SwitchCompat doesShoot;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView driveBase;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final EditText driveBaseAnswer;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView endgameQuestions;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView gameStrategy;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final EditText gameStrategyAnswer;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox ground;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox groundAndSource;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final SwitchCompat hasAuto;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox inYourWing;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView intake;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox left;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView longestShot;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox right;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final SwitchCompat rookieTeam;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView scoreAuto;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final EditText scoreCountAuto;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView scoreTeleop;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final EditText scoreTeleopAnswer;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox source;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox speaker;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView startingArea;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Button submit;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView teamName;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final EditText teamNameAnswer;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView teleopQuestions;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView textDashboard;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView textHome;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView title;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView whereDoYouScore;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox wooferPodiumAndWing;

  private FragmentPitScoutingBinding(@NonNull ConstraintLayout rootView,
      @Nullable CheckBox againstPodium, @Nullable CheckBox againstSubwoofer, @Nullable CheckBox amp,
      @Nullable CheckBox ampAndSpeaker, @Nullable TextView autoCount,
      @Nullable EditText autoCountNumber, @Nullable TextView autoQuestions,
      @Nullable TextView basicQuestions, @Nullable SwitchCompat canClimb,
      @Nullable SwitchCompat canGetHarmony, @Nullable SwitchCompat canScoreTrap,
      @Nullable CheckBox center, @Nullable TextView climbTime, @Nullable EditText climbTimeAnswer,
      @Nullable TextView coach, @Nullable EditText coachAnswer, @Nullable SwitchCompat doesIntake,
      @Nullable CheckBox doesMatter, @Nullable SwitchCompat doesPreload,
      @Nullable SwitchCompat doesShoot, @Nullable TextView driveBase,
      @Nullable EditText driveBaseAnswer, @Nullable TextView endgameQuestions,
      @Nullable TextView gameStrategy, @Nullable EditText gameStrategyAnswer,
      @Nullable CheckBox ground, @Nullable CheckBox groundAndSource, @Nullable SwitchCompat hasAuto,
      @Nullable CheckBox inYourWing, @Nullable TextView intake, @Nullable CheckBox left,
      @Nullable TextView longestShot, @Nullable CheckBox right, @Nullable SwitchCompat rookieTeam,
      @Nullable TextView scoreAuto, @Nullable EditText scoreCountAuto,
      @Nullable TextView scoreTeleop, @Nullable EditText scoreTeleopAnswer,
      @Nullable CheckBox source, @Nullable CheckBox speaker, @Nullable TextView startingArea,
      @Nullable Button submit, @Nullable TextView teamName, @Nullable EditText teamNameAnswer,
      @Nullable TextView teleopQuestions, @Nullable TextView textDashboard,
      @Nullable TextView textHome, @Nullable TextView title, @Nullable TextView whereDoYouScore,
      @Nullable CheckBox wooferPodiumAndWing) {
    this.rootView = rootView;
    this.againstPodium = againstPodium;
    this.againstSubwoofer = againstSubwoofer;
    this.amp = amp;
    this.ampAndSpeaker = ampAndSpeaker;
    this.autoCount = autoCount;
    this.autoCountNumber = autoCountNumber;
    this.autoQuestions = autoQuestions;
    this.basicQuestions = basicQuestions;
    this.canClimb = canClimb;
    this.canGetHarmony = canGetHarmony;
    this.canScoreTrap = canScoreTrap;
    this.center = center;
    this.climbTime = climbTime;
    this.climbTimeAnswer = climbTimeAnswer;
    this.coach = coach;
    this.coachAnswer = coachAnswer;
    this.doesIntake = doesIntake;
    this.doesMatter = doesMatter;
    this.doesPreload = doesPreload;
    this.doesShoot = doesShoot;
    this.driveBase = driveBase;
    this.driveBaseAnswer = driveBaseAnswer;
    this.endgameQuestions = endgameQuestions;
    this.gameStrategy = gameStrategy;
    this.gameStrategyAnswer = gameStrategyAnswer;
    this.ground = ground;
    this.groundAndSource = groundAndSource;
    this.hasAuto = hasAuto;
    this.inYourWing = inYourWing;
    this.intake = intake;
    this.left = left;
    this.longestShot = longestShot;
    this.right = right;
    this.rookieTeam = rookieTeam;
    this.scoreAuto = scoreAuto;
    this.scoreCountAuto = scoreCountAuto;
    this.scoreTeleop = scoreTeleop;
    this.scoreTeleopAnswer = scoreTeleopAnswer;
    this.source = source;
    this.speaker = speaker;
    this.startingArea = startingArea;
    this.submit = submit;
    this.teamName = teamName;
    this.teamNameAnswer = teamNameAnswer;
    this.teleopQuestions = teleopQuestions;
    this.textDashboard = textDashboard;
    this.textHome = textHome;
    this.title = title;
    this.whereDoYouScore = whereDoYouScore;
    this.wooferPodiumAndWing = wooferPodiumAndWing;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentPitScoutingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentPitScoutingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_pit_scouting, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentPitScoutingBinding bind(@NonNull View rootView) {
    CheckBox againstPodium = ViewBindings.findChildViewById(rootView, R.id.against_podium);

    CheckBox againstSubwoofer = ViewBindings.findChildViewById(rootView, R.id.against_subwoofer);

    CheckBox amp = ViewBindings.findChildViewById(rootView, R.id.amp);

    CheckBox ampAndSpeaker = ViewBindings.findChildViewById(rootView, R.id.amp_and_speaker);

    TextView autoCount = ViewBindings.findChildViewById(rootView, R.id.auto_count);

    EditText autoCountNumber = ViewBindings.findChildViewById(rootView, R.id.auto_count_number);

    TextView autoQuestions = ViewBindings.findChildViewById(rootView, R.id.auto_questions);

    TextView basicQuestions = ViewBindings.findChildViewById(rootView, R.id.basic_questions);

    SwitchCompat canClimb = ViewBindings.findChildViewById(rootView, R.id.can_climb);

    SwitchCompat canGetHarmony = ViewBindings.findChildViewById(rootView, R.id.can_get_harmony);

    SwitchCompat canScoreTrap = ViewBindings.findChildViewById(rootView, R.id.can_score_trap);

    CheckBox center = ViewBindings.findChildViewById(rootView, R.id.center);

    TextView climbTime = ViewBindings.findChildViewById(rootView, R.id.climb_time);

    EditText climbTimeAnswer = ViewBindings.findChildViewById(rootView, R.id.climb_time_answer);

    TextView coach = ViewBindings.findChildViewById(rootView, R.id.coach);

    EditText coachAnswer = ViewBindings.findChildViewById(rootView, R.id.coach_answer);

    SwitchCompat doesIntake = ViewBindings.findChildViewById(rootView, R.id.does_intake);

    CheckBox doesMatter = ViewBindings.findChildViewById(rootView, R.id.does_matter);

    SwitchCompat doesPreload = ViewBindings.findChildViewById(rootView, R.id.does_preload);

    SwitchCompat doesShoot = ViewBindings.findChildViewById(rootView, R.id.does_shoot);

    TextView driveBase = ViewBindings.findChildViewById(rootView, R.id.drive_base);

    EditText driveBaseAnswer = ViewBindings.findChildViewById(rootView, R.id.drive_base_answer);

    TextView endgameQuestions = ViewBindings.findChildViewById(rootView, R.id.endgame_questions);

    TextView gameStrategy = ViewBindings.findChildViewById(rootView, R.id.game_strategy);

    EditText gameStrategyAnswer = ViewBindings.findChildViewById(rootView, R.id.game_strategy_answer);

    CheckBox ground = ViewBindings.findChildViewById(rootView, R.id.ground);

    CheckBox groundAndSource = ViewBindings.findChildViewById(rootView, R.id.ground_and_source);

    SwitchCompat hasAuto = ViewBindings.findChildViewById(rootView, R.id.has_auto);

    CheckBox inYourWing = ViewBindings.findChildViewById(rootView, R.id.in_your_wing);

    TextView intake = ViewBindings.findChildViewById(rootView, R.id.intake);

    CheckBox left = ViewBindings.findChildViewById(rootView, R.id.left);

    TextView longestShot = ViewBindings.findChildViewById(rootView, R.id.longest_shot);

    CheckBox right = ViewBindings.findChildViewById(rootView, R.id.right);

    SwitchCompat rookieTeam = ViewBindings.findChildViewById(rootView, R.id.rookie_team);

    TextView scoreAuto = ViewBindings.findChildViewById(rootView, R.id.score_auto);

    EditText scoreCountAuto = ViewBindings.findChildViewById(rootView, R.id.score_count_auto);

    TextView scoreTeleop = ViewBindings.findChildViewById(rootView, R.id.score_teleop);

    EditText scoreTeleopAnswer = ViewBindings.findChildViewById(rootView, R.id.score_teleop_answer);

    CheckBox source = ViewBindings.findChildViewById(rootView, R.id.source);

    CheckBox speaker = ViewBindings.findChildViewById(rootView, R.id.speaker);

    TextView startingArea = ViewBindings.findChildViewById(rootView, R.id.starting_area);

    Button submit = ViewBindings.findChildViewById(rootView, R.id.submit);

    TextView teamName = ViewBindings.findChildViewById(rootView, R.id.team_name);

    EditText teamNameAnswer = ViewBindings.findChildViewById(rootView, R.id.team_name_answer);

    TextView teleopQuestions = ViewBindings.findChildViewById(rootView, R.id.teleop_questions);

    TextView textDashboard = ViewBindings.findChildViewById(rootView, R.id.text_dashboard);

    TextView textHome = ViewBindings.findChildViewById(rootView, R.id.text_home);

    TextView title = ViewBindings.findChildViewById(rootView, R.id.title);

    TextView whereDoYouScore = ViewBindings.findChildViewById(rootView, R.id.where_do_you_score);

    CheckBox wooferPodiumAndWing = ViewBindings.findChildViewById(rootView, R.id.wooferPodiumAndWing);

    return new FragmentPitScoutingBinding((ConstraintLayout) rootView, againstPodium,
        againstSubwoofer, amp, ampAndSpeaker, autoCount, autoCountNumber, autoQuestions,
        basicQuestions, canClimb, canGetHarmony, canScoreTrap, center, climbTime, climbTimeAnswer,
        coach, coachAnswer, doesIntake, doesMatter, doesPreload, doesShoot, driveBase,
        driveBaseAnswer, endgameQuestions, gameStrategy, gameStrategyAnswer, ground,
        groundAndSource, hasAuto, inYourWing, intake, left, longestShot, right, rookieTeam,
        scoreAuto, scoreCountAuto, scoreTeleop, scoreTeleopAnswer, source, speaker, startingArea,
        submit, teamName, teamNameAnswer, teleopQuestions, textDashboard, textHome, title,
        whereDoYouScore, wooferPodiumAndWing);
  }
}
