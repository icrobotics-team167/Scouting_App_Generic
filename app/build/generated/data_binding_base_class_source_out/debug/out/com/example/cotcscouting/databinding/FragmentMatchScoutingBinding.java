// Generated by view binder compiler. Do not edit!
package com.example.cotcscouting.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.SeekBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.cotcscouting.R;
import java.lang.Override;

public final class FragmentMatchScoutingBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView ampNoteAuto;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView ampNoteAutoText;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView ampNoteTeleOp;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView ampNoteTeleOpText;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView auto;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Button autoAmpDec;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Button autoAmpInc;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Button autoSpeakerDec;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Button autoSpeakerInc;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox defense;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox disabledRobot;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox leave;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final EditText matchNotes;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final EditText matchNumber;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView matchNumberText;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView notes;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox onStage;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox onStageSpotlit;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView other;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox park;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView scoutAssignment;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView scoutAssignmentText;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView scoutName;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView scoutNameText;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView shootingDistance;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final SeekBar shootingDistanceBar;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView speakerNoteAuto;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView speakerNoteAutoText;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView spotlitDesc;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Button submit;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final EditText teamNumber;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView teamNumberText;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView teleOp;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Button teleOpAmpDec;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Button teleOpAmpInc;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView teleOpSpeaker;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Button teleOpSpeakerDec;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Button teleOpSpeakerInc;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView teleOpSpeakerText;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView textDashboard;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final CheckBox trapNote;

  private FragmentMatchScoutingBinding(@NonNull ConstraintLayout rootView,
      @Nullable TextView ampNoteAuto, @Nullable TextView ampNoteAutoText,
      @Nullable TextView ampNoteTeleOp, @Nullable TextView ampNoteTeleOpText,
      @Nullable TextView auto, @Nullable Button autoAmpDec, @Nullable Button autoAmpInc,
      @Nullable Button autoSpeakerDec, @Nullable Button autoSpeakerInc, @Nullable CheckBox defense,
      @Nullable CheckBox disabledRobot, @Nullable CheckBox leave, @Nullable EditText matchNotes,
      @Nullable EditText matchNumber, @Nullable TextView matchNumberText, @Nullable TextView notes,
      @Nullable CheckBox onStage, @Nullable CheckBox onStageSpotlit, @Nullable TextView other,
      @Nullable CheckBox park, @Nullable TextView scoutAssignment,
      @Nullable TextView scoutAssignmentText, @Nullable TextView scoutName,
      @Nullable TextView scoutNameText, @Nullable TextView shootingDistance,
      @Nullable SeekBar shootingDistanceBar, @Nullable TextView speakerNoteAuto,
      @Nullable TextView speakerNoteAutoText, @Nullable TextView spotlitDesc,
      @Nullable Button submit, @Nullable EditText teamNumber, @Nullable TextView teamNumberText,
      @Nullable TextView teleOp, @Nullable Button teleOpAmpDec, @Nullable Button teleOpAmpInc,
      @Nullable TextView teleOpSpeaker, @Nullable Button teleOpSpeakerDec,
      @Nullable Button teleOpSpeakerInc, @Nullable TextView teleOpSpeakerText,
      @Nullable TextView textDashboard, @Nullable CheckBox trapNote) {
    this.rootView = rootView;
    this.ampNoteAuto = ampNoteAuto;
    this.ampNoteAutoText = ampNoteAutoText;
    this.ampNoteTeleOp = ampNoteTeleOp;
    this.ampNoteTeleOpText = ampNoteTeleOpText;
    this.auto = auto;
    this.autoAmpDec = autoAmpDec;
    this.autoAmpInc = autoAmpInc;
    this.autoSpeakerDec = autoSpeakerDec;
    this.autoSpeakerInc = autoSpeakerInc;
    this.defense = defense;
    this.disabledRobot = disabledRobot;
    this.leave = leave;
    this.matchNotes = matchNotes;
    this.matchNumber = matchNumber;
    this.matchNumberText = matchNumberText;
    this.notes = notes;
    this.onStage = onStage;
    this.onStageSpotlit = onStageSpotlit;
    this.other = other;
    this.park = park;
    this.scoutAssignment = scoutAssignment;
    this.scoutAssignmentText = scoutAssignmentText;
    this.scoutName = scoutName;
    this.scoutNameText = scoutNameText;
    this.shootingDistance = shootingDistance;
    this.shootingDistanceBar = shootingDistanceBar;
    this.speakerNoteAuto = speakerNoteAuto;
    this.speakerNoteAutoText = speakerNoteAutoText;
    this.spotlitDesc = spotlitDesc;
    this.submit = submit;
    this.teamNumber = teamNumber;
    this.teamNumberText = teamNumberText;
    this.teleOp = teleOp;
    this.teleOpAmpDec = teleOpAmpDec;
    this.teleOpAmpInc = teleOpAmpInc;
    this.teleOpSpeaker = teleOpSpeaker;
    this.teleOpSpeakerDec = teleOpSpeakerDec;
    this.teleOpSpeakerInc = teleOpSpeakerInc;
    this.teleOpSpeakerText = teleOpSpeakerText;
    this.textDashboard = textDashboard;
    this.trapNote = trapNote;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentMatchScoutingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentMatchScoutingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_match_scouting, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentMatchScoutingBinding bind(@NonNull View rootView) {
    TextView ampNoteAuto = ViewBindings.findChildViewById(rootView, R.id.amp_note_auto);

    TextView ampNoteAutoText = ViewBindings.findChildViewById(rootView, R.id.amp_note_auto_text);

    TextView ampNoteTeleOp = ViewBindings.findChildViewById(rootView, R.id.amp_note_tele_op);

    TextView ampNoteTeleOpText = ViewBindings.findChildViewById(rootView, R.id.amp_note_tele_op_text);

    TextView auto = ViewBindings.findChildViewById(rootView, R.id.auto);

    Button autoAmpDec = ViewBindings.findChildViewById(rootView, R.id.auto_amp_dec);

    Button autoAmpInc = ViewBindings.findChildViewById(rootView, R.id.auto_amp_inc);

    Button autoSpeakerDec = ViewBindings.findChildViewById(rootView, R.id.auto_speaker_dec);

    Button autoSpeakerInc = ViewBindings.findChildViewById(rootView, R.id.auto_speaker_inc);

    CheckBox defense = ViewBindings.findChildViewById(rootView, R.id.defense);

    CheckBox disabledRobot = ViewBindings.findChildViewById(rootView, R.id.disabled_robot);

    CheckBox leave = ViewBindings.findChildViewById(rootView, R.id.leave);

    EditText matchNotes = ViewBindings.findChildViewById(rootView, R.id.match_notes);

    EditText matchNumber = ViewBindings.findChildViewById(rootView, R.id.match_number);

    TextView matchNumberText = ViewBindings.findChildViewById(rootView, R.id.match_number_text);

    TextView notes = ViewBindings.findChildViewById(rootView, R.id.notes);

    CheckBox onStage = ViewBindings.findChildViewById(rootView, R.id.on_stage);

    CheckBox onStageSpotlit = ViewBindings.findChildViewById(rootView, R.id.on_stage_spotlit);

    TextView other = ViewBindings.findChildViewById(rootView, R.id.other);

    CheckBox park = ViewBindings.findChildViewById(rootView, R.id.park);

    TextView scoutAssignment = ViewBindings.findChildViewById(rootView, R.id.scout_assignment);

    TextView scoutAssignmentText = ViewBindings.findChildViewById(rootView, R.id.scout_assignment_text);

    TextView scoutName = ViewBindings.findChildViewById(rootView, R.id.scout_name);

    TextView scoutNameText = ViewBindings.findChildViewById(rootView, R.id.scout_name_text);

    TextView shootingDistance = ViewBindings.findChildViewById(rootView, R.id.shooting_distance);

    SeekBar shootingDistanceBar = ViewBindings.findChildViewById(rootView, R.id.shooting_distance_bar);

    TextView speakerNoteAuto = ViewBindings.findChildViewById(rootView, R.id.speaker_note_auto);

    TextView speakerNoteAutoText = ViewBindings.findChildViewById(rootView, R.id.speaker_note_auto_text);

    TextView spotlitDesc = ViewBindings.findChildViewById(rootView, R.id.spotlit_desc);

    Button submit = ViewBindings.findChildViewById(rootView, R.id.submit);

    EditText teamNumber = ViewBindings.findChildViewById(rootView, R.id.team_number);

    TextView teamNumberText = ViewBindings.findChildViewById(rootView, R.id.team_number_text);

    TextView teleOp = ViewBindings.findChildViewById(rootView, R.id.tele_op);

    Button teleOpAmpDec = ViewBindings.findChildViewById(rootView, R.id.tele_op_amp_dec);

    Button teleOpAmpInc = ViewBindings.findChildViewById(rootView, R.id.tele_op_amp_inc);

    TextView teleOpSpeaker = ViewBindings.findChildViewById(rootView, R.id.tele_op_speaker);

    Button teleOpSpeakerDec = ViewBindings.findChildViewById(rootView, R.id.tele_op_speaker_dec);

    Button teleOpSpeakerInc = ViewBindings.findChildViewById(rootView, R.id.tele_op_speaker_inc);

    TextView teleOpSpeakerText = ViewBindings.findChildViewById(rootView, R.id.tele_op_speaker_text);

    TextView textDashboard = ViewBindings.findChildViewById(rootView, R.id.text_dashboard);

    CheckBox trapNote = ViewBindings.findChildViewById(rootView, R.id.trap_note);

    return new FragmentMatchScoutingBinding((ConstraintLayout) rootView, ampNoteAuto,
        ampNoteAutoText, ampNoteTeleOp, ampNoteTeleOpText, auto, autoAmpDec, autoAmpInc,
        autoSpeakerDec, autoSpeakerInc, defense, disabledRobot, leave, matchNotes, matchNumber,
        matchNumberText, notes, onStage, onStageSpotlit, other, park, scoutAssignment,
        scoutAssignmentText, scoutName, scoutNameText, shootingDistance, shootingDistanceBar,
        speakerNoteAuto, speakerNoteAutoText, spotlitDesc, submit, teamNumber, teamNumberText,
        teleOp, teleOpAmpDec, teleOpAmpInc, teleOpSpeaker, teleOpSpeakerDec, teleOpSpeakerInc,
        teleOpSpeakerText, textDashboard, trapNote);
  }
}
